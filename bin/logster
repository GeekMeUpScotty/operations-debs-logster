#!/usr/bin/python -tt
# -*- coding: utf-8 -*-

###
###  logster
###
###  Tails a log and applies a log parser (that knows what to do with specific)
###  types of entries in the log, then reports metrics to Ganglia and/or Graphite.
###
###  Usage:
###
###    $ logster [options] parser logfile
###
###  Help:
###
###    $ logster -h
###
###
###  Copyright 2011, Etsy, Inc.
###
###  This file is part of Logster.
###  
###  Logster is free software: you can redistribute it and/or modify
###  it under the terms of the GNU General Public License as published by
###  the Free Software Foundation, either version 3 of the License, or
###  (at your option) any later version.
###  
###  Logster is distributed in the hope that it will be useful,
###  but WITHOUT ANY WARRANTY; without even the implied warranty of
###  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
###  GNU General Public License for more details.
###  
###  You should have received a copy of the GNU General Public License
###  along with Logster. If not, see <http://www.gnu.org/licenses/>.
###
###  Forked from the ganglia-logtailer project 
###  (http://bitbucket.org/maplebed/ganglia-logtailer):
###    Copyright Linden Research, Inc. 2008
###    Released under the GPL v2 or later.
###    For a full description of the license, please visit 
###    http://www.gnu.org/licenses/gpl.txt
###

import os
import sys
import re 
import stat
import logging.handlers
import fcntl
import socket 
import traceback

from time import time, strftime, gmtime
from math import floor

# Local dependencies
from logster import logster


if __name__ == '__main__':
    cmdline = logster.get_cmdline_optparse()
    options, arguments = cmdline.parse_args()

    if options.parser_help:
        options.parser_options = '-h'

    if (len(arguments) != 2):
        cmdline.print_help()
        cmdline.error("Supply at least two arguments: parser and logfile.")
    if not options.output:
        cmdline.print_help()
        cmdline.error("Supply where the data should be sent with -o (or --output).")
    if 'graphite' in options.output and not options.graphite_host:
        cmdline.print_help()
        cmdline.error("You must supply --graphite-host when using 'graphite' as an output type.")
    if 'cloudwatch' in options.output and not options.aws_key and not options.aws_secret_key:
        cmdline.print_help()
        cmdline.error("You must supply --aws-key and --aws-secret-key or Set environment variables. AWS_ACCESS_KEY_ID for --aws-key, AWS_SECRET_ACCESS_KEY_ID for --aws-secret-key")
    if 'nsca' in options.output and not options.nsca_host:
        cmdline.print_help()
        cmdline.error("You must supply --nsca-host when using 'nsca' as an output type.")

    class_name = arguments[0]
    log_file   = arguments[1]

    logster.main(class_name, log_file, options)
    

